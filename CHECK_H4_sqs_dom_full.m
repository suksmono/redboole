% CHECK_H4_sqs_dom.m
%% use symbolic computation for Boolean reduction
% s={-1,1}; q={0,1}
% keep in mind that boolean reduction works on q-domain
% case: H4=
% |<-problems=M ->| <---------- ancillas=C(M,2)=M(M-1)/2 --------------->|
%[q11 q12 q13 q14;||q15(1,2)|q16(1,3)|q17(1,4)|q18(2,3)|q19(2,4)|q1_10(3,4)
% q21 q22 q23 q24;||q25(1,2)|q26(1,3)|q27(1,4)|q28(2,3)|q29(2,4)|q2_10(3,4)
% q31 q32 q33 q34;||q35(1,2)|q36(1,3)|q37(1,4)|q38(2,3)|q39(2,4)|q3_10(3,4)
% q41 q42 q43 q44]||q45(1,2)|q46(1,3)|q47(1,4)|q48(2,3)|q49(2,4)|q4_10(3,4)

% off-diagonal term is dij
% ----------------------------------------------------------------------
% 1. Formulate Hamiltonian: Hks
% 2. Transform to q-domain: Hks-> Hkq
% 3. Boolean reduction: Hkq->H2q
% 4. Transform-back to s-domain: H2q->H2s
% 5. Extract Ising params and apply SA
% ----------------------------------------------------------------------
clear all;
addpath functions;
syms q11 q12 q13 q14 q15 q16 q17 q18 q19 q110;  
syms q21 q22 q23 q24 q25 q26 q27 q28 q29 q210; 
syms q31 q32 q33 q34 q35 q36 q37 q38 q39 q310;  
syms q41 q42 q43 q44 q45 q46 q47 q48 q49 q410;
%% store as matrix of symbols
q=[ q11 q12 q13 q14 q15 q16 q17 q18 q19 q110; ...
    q21 q22 q23 q24 q25 q26 q27 q28 q29 q210; ...
    q31 q32 q33 q34 q35 q36 q37 q38 q39 q310; ...
    q41 q42 q43 q44 q45 q46 q47 q48 q49 q410 ...
    ];

% syms q17 q18 q19 q20;
%% 1. Formulate Hamiltonian Hks
% ==> d12=s1*s3 + s2*s4 ;
syms s11 s12 s13 s14 s15 s16 s17 s18 s19 s110;
syms s21 s22 s23 s24 s25 s26 s27 s28 s29 s210;
syms s31 s32 s33 s34 s35 s36 s37 s38 s39 s310;
syms s41 s42 s43 s44 s45 s46 s47 s48 s49 s410;

s=[ s11 s12 s13 s14 s15 s16 s17 s18 s19 s110; ...
    s21 s22 s23 s24 s25 s26 s27 s28 s29 s210; ...
    s31 s32 s33 s34 s35 s36 s37 s38 s39 s310; ...
    s41 s42 s43 s44 s45 s46 s47 s48 s49 s410 ...
    ];

    
%% define substitute of qi*qj-> qk
%all qi*qj, for <v1,v2>: 
% q1*q5->q_{M*M+1}, q2*q6->q_{M*M+2}, q3*q7->_{M*M+3}, and q4*q8->q_{M*M+4}:
% in general: qi*q_{i+M*(c-1)}; where c is rcolumn number, M: H-order
%  to be replaced with q_{M*M+M*(c-1)+r}, r: row number
d12=transpose(s(:,1))*s(:,2); 
d13=transpose(s(:,1))*s(:,3); 
d14=transpose(s(:,1))*s(:,4); 
%
d23=transpose(s(:,2))*s(:,3); 
d24=transpose(s(:,2))*s(:,4); 
d34=transpose(s(:,3))*s(:,4); 
% disp(sprintf('d12 in s-domain: \n%s',char(d12)));
% disp(sprintf('d13 in s-domain: \n%s',char(d13)));
% disp(sprintf('d13 in s-domain: \n%s',char(d14)));
% > s11*s12 + s21*s22 + s31*s32 + s41*s42
d12_2=expand(d12^2);
d13_2=expand(d13^2);
d14_2=expand(d14^2);
%
d23_2=expand(d23^2);
d24_2=expand(d24^2);
d34_2=expand(d34^2);
%% change all si^2 to 1
Hks_12=simplify( ...
                 subs(d12_2, ...
                 { s11^2, s21^2, s31^2, s41^2, ...
                   s12^2, s22^2, s32^2, s42^2}, ...
                 { 1, 1, 1, 1, 1, 1, 1, 1} ...
                 ) ...
             );            
%
Hks_13=simplify( ...
                 subs(d13_2, ...
                 { s11^2, s21^2, s31^2, s41^2 , ...
                   s13^2, s23^2, s33^2, s43^2}, ...
                 { 1, 1, 1, 1, 1, 1, 1, 1} ...
                 ) ...
             );            
%
Hks_14=simplify( ...
                 subs(d14_2, ...
                 { s11^2, s21^2, s31^2, s41^2 , ... 
                   s14^2, s24^2, s34^2, s44^2 }, ...
                 { 1, 1, 1, 1, 1, 1, 1, 1} ...
                 ) ...
             );            

%%
Hks_23=simplify( ...
                 subs(d23_2, ...
                 { s12^2, s22^2, s32^2, s42^2 , ... 
                   s13^2, s23^2, s33^2, s43^2 }, ...
                 { 1, 1, 1, 1, 1, 1, 1, 1} ...
                 ) ...
             );            

%
Hks_24=simplify( ...
                 subs(d24_2, ...
                 { s12^2, s22^2, s32^2, s42^2 , ... 
                   s14^2, s24^2, s34^2, s44^2 }, ...
                 { 1, 1, 1, 1, 1, 1, 1, 1} ...
                 ) ...
             );            
%
Hks_34=simplify( ...
                 subs(d34_2, ...
                 { s13^2, s23^2, s33^2, s43^2 , ... 
                   s14^2, s24^2, s34^2, s44^2 }, ...
                 { 1, 1, 1, 1, 1, 1, 1, 1} ...
                 ) ...
             );            

%%
Hks=Hks_12+ Hks_13 + Hks_14+ Hks_23+ Hks_24+ Hks_34;
% disp(sprintf('Hks_12: \n%s',char(Hks_12)));
% disp(sprintf('Hks_13: \n%s',char(Hks_13)));
disp(sprintf('Hks: \n%s',char(Hks)));

%% max(Hks)=2*6+2=16

 
%% 2. Transform to q-domain: Hks-> Hkq
Hkq=expand(simplify( ...
                subs(Hks, ...
                { s11, s21, s31, s41, ...
                  s12, s22, s32, s42, ...
                  s13, s23, s33, s43, ...
                  s14, s24, s34, s44  ...
                  }, ...
                { s2q(q11), s2q(q21), s2q(q31),s2q(q41), ...
                  s2q(q12), s2q(q22) ,s2q(q32),s2q(q42), ...
                  s2q(q13), s2q(q23) ,s2q(q33),s2q(q43), ...
                  s2q(q14), s2q(q24) ,s2q(q34),s2q(q44) ...
                  }...
                )...
            ));
disp(sprintf('Hkq: \n%s',char(Hkq)));
% ------------------------------------------------------------------------

%%  3. Boolean reduction: Hkq->H2q
% choose delta=2*Hmax = 3*16=48
% q11*q12->q15, q21*q22->q25 , q31*q32->q35, q41*q42->q45; 
% [ 11 12 .... 14| 15 16 ... 110]
% [ 21 22 .... 24| 25 26 ... 210]  
%  ...

%
d=6*16;
H2q=simplify( ...
     subs( Hkq, ...
          { q(1,1)*q(1,2), q(2,1)*q(2,2), q(3,1)*q(3,2), q(4,1)*q(4,2), ...
            q(1,1)*q(1,3), q(2,1)*q(2,3), q(3,1)*q(3,3), q(4,1)*q(4,3), ...
            q(1,1)*q(1,4), q(2,1)*q(2,4), q(3,1)*q(3,4), q(4,1)*q(4,4), ...
            q(1,2)*q(1,3), q(2,2)*q(2,3), q(3,2)*q(3,3), q(4,2)*q(4,3), ...
            q(1,2)*q(1,4), q(2,2)*q(2,4), q(3,2)*q(3,4), q(4,2)*q(4,4), ...
            q(1,3)*q(1,4), q(2,3)*q(2,4), q(3,3)*q(3,4), q(4,3)*q(4,4) ...
            }, ...
          { q(1,5), q(2,5), q(3,5), q(4,5), ...
            q(1,6), q(2,6), q(3,6), q(4,6), ...
            q(1,7), q(2,7), q(3,7), q(4,7), ...
            q(1,8), q(2,8), q(3,8), q(4,8), ...
            q(1,9), q(2,9), q(3,9), q(4,9), ...
            q(1,10), q(2,10), q(3,10), q(4,10) ...
            }...
          )...
     + H2body(q(1,1),q(1,2),q(1,5),d) ... %(1,2) v
     + H2body(q(2,1),q(2,2),q(2,5),d) ...
     + H2body(q(3,1),q(3,2),q(3,5),d) ...
     + H2body(q(4,1),q(4,2),q(4,5),d) ... 
     + H2body(q(1,1),q(1,3),q(1,6),d) ... %(1,3) v
     + H2body(q(2,1),q(2,3),q(2,6),d) ...
     + H2body(q(3,1),q(3,3),q(3,6),d) ...
     + H2body(q(4,1),q(4,3),q(4,6),d) ...     
     + H2body(q(1,1),q(1,4),q(1,7),d) ... %(1,4) v
     + H2body(q(2,1),q(2,4),q(2,7),d) ...
     + H2body(q(3,1),q(3,4),q(3,7),d) ...
     + H2body(q(4,1),q(4,4),q(4,7),d) ...
     + H2body(q(1,2),q(1,3),q(1,8),d) ... %(2,3)
     + H2body(q(2,2),q(2,3),q(2,8),d) ...
     + H2body(q(3,2),q(3,3),q(3,8),d) ...
     + H2body(q(4,2),q(4,3),q(4,8),d) ...
     + H2body(q(1,2),q(1,4),q(1,9),d) ... %(2,4)
     + H2body(q(2,2),q(2,4),q(2,9),d) ...
     + H2body(q(3,2),q(3,4),q(3,9),d) ...
     + H2body(q(4,2),q(4,4),q(4,9),d) ...
     + H2body(q(1,3),q(1,4),q(1,10),d) ... %(3,4)
     + H2body(q(2,3),q(2,4),q(2,10),d) ...
     + H2body(q(3,3),q(3,4),q(3,10),d) ...
     + H2body(q(4,3),q(4,4),q(4,10),d) ...
            );
%% DISPLAY RESULTS
disp(sprintf('H2q: \n%s',char(expand(H2q))));

%% 4. Transform-back to s-domain: H2q->H2s
H2s = simplify( ...
            subs(H2q, ...
                { q11,q21,q31,q41, ... 
                  q12,q22,q32,q42, ...
                  q13,q23,q33,q43, ...
                  q14,q24,q34,q44, ...
                  q15,q25,q35,q45, ...
                  q16,q26,q36,q46, ...
                  q17,q27,q37,q47, ...
                  q18,q28,q38,q48, ...
                  q19,q29,q39,q49, ...
                  q110,q210,q310,q410 ...
                  }, ...
                { q2s(s11), q2s(s21),q2s(s31),q2s(s41), ...
                  q2s(s12), q2s(s22),q2s(s32),q2s(s42), ...
                  q2s(s13), q2s(s23),q2s(s33),q2s(s43), ...
                  q2s(s14), q2s(s24),q2s(s34),q2s(s44), ...
                  q2s(s15), q2s(s25),q2s(s35),q2s(s45), ...
                  q2s(s16), q2s(s26),q2s(s36),q2s(s46), ...
                  q2s(s17), q2s(s27),q2s(s37),q2s(s47), ...
                  q2s(s18), q2s(s28),q2s(s38),q2s(s48), ...
                  q2s(s19), q2s(s29),q2s(s39),q2s(s49), ...
                  q2s(s110), q2s(s210),q2s(s310),q2s(s410), ...
                  }...
                )...
            );
disp(sprintf('H2s: \n%s', char(expand(H2s))));

% ------------------------------------------------------------
%  EXTRACT THE RESULTS FROM SYMBOLIC SOLUTION
% ------------------------------------------------------------
% now, we are working on orthogonalization of 2-binary vectors
% q11 ... q41, q12 .... q42, q15, ..., q45 =? 4*3=12 qubits 
%     [cx,tx]=coeffs(H2s,[s1 s2 s3 s4 s5 s6]);
[cx,tx]=coeffs(H2s,[ s11 s21 s31 s41 ...
                     s12 s22 s32 s42 ...
                     s13 s23 s33 s43 ...
                     s14 s24 s34 s44 ...
                     s15 s25 s35 s45 ...
                     s16 s26 s36 s46 ...
                     s17 s27 s37 s47 ...
                     s18 s28 s38 s48 ...
                     s19 s29 s39 s49 ...
                     s110 s210 s310 s410 ...
                     ]);
% number of  qubits: q11, ..., q45 => 7*4=28
NQ=10*4;

%% create lookup tbl for product of s_ij*s_mn
sx=[transpose(s(:,1)) transpose(s(:,2)) transpose(s(:,3)) transpose(s(:,4)) ...
    transpose(s(:,5)) transpose(s(:,6)) transpose(s(:,7)) transpose(s(:,8)) ...
    transpose(s(:,9)) transpose(s(:,10))];
%%
tblook=transpose(sx)*sx;
Jij=zeros(NQ,NQ); % init Jij: coupling coefficients
hi=zeros(NQ,1);
b=0; % bias
%% fill in b
NTERM=length(cx);
for m=1:NTERM
    if (tx(m)==1) 
        b=cx(m);
    end
end;
%% fill in hi
disp(sprintf('calculating hi ...'));
for m=1:NQ
    tsym=sx(m);
    for nn=1:NTERM
        if(tx(nn)==tsym)
            hi(m)=cx(nn);
        end;
    end;
end;
%% fill in Jij, we only consider upper diagonal of Jij
disp(sprintf('calculating Jij ...'));
for m=1:NQ
    for nn=m+1:NQ
        % get quadratic terms s_ij*s_mn
        tquad = tblook(m,nn);
        % now get the cofficient \
            for kkk =1:NTERM
                if(tx(kkk)==tquad)
                    Jij(m,nn)=cx(kkk);
                end
            end;
    end;
end;


% if 0==1
% ------------------------------------------------------------
% SEND THE RESULTS (Jij, hi, b) TO SIMULATOR (S.A.)
% ------------------------------------------------------------
ITR1=100;%2*10*1000; %set 1 for random init
vStart=0;
%% create a vector of [(N-1)x(N-1),1] spin with random {-,+] values
vSpin0=vRandSpin(NQ);

% Etresh= 0;%-2*(4*K-1)*(2*K-1);%N/4; % target energy
% annealing schedule
maxIter=1*40*1000;
Ptresh=pMCSchedule(maxIter,0.5);
%-- Ptresh is the schedule
k=0;
vSpin=vSpin0;
% % init energy setting
Ecurr = vEnergyBx(b, hi, Jij,vSpin);
% NFLIP=N-NO;
Etresh=0;
while k<maxIter && Ecurr>Etresh
    k=k+1;
    Eprev=Ecurr;
    % try Monte Carlo
    % --flip a row randomly
    RD=randperm(NQ);
    % copy current spin to a template
    tvSpin=vSpin;
    tvSpin(RD(1)) = -1*tvSpin(RD(1));
    Ecurr=vEnergyBx(b, hi, Jij,tvSpin);
    if (Ecurr<Eprev)||rand>Ptresh(k) %accept if lower
        vSpin=tvSpin;
    end;
    Esys=vEnergyBx(b, hi, Jij,vSpin);
    Ecurr=Esys;
    vE(k)=Esys;
    disp(sprintf('LQ%d: Iter->%d of %d, Tresh=%1.4f, E=%4.2f',...
        NQ,k,maxIter, Ptresh(k),double(Esys)));
end;
% ------------------------------------------------------------
% DISPLAY THE RESULTS
% ------------------------------------------------------------
v1=vSpin(1:4); v2=vSpin(5:8); v3=vSpin(9:12); v4=vSpin(13:16);
disp(sprintf('\ns11= %2g, s21= %2g, s31= %2g, s41= %2g',v1));
disp(sprintf('s12= %2g, s22= %2g, s32= %2g, s42= %2g',v2));
disp(sprintf('s13= %2g, s23= %2g, s33= %2g, s43= %2g',v3));
disp(sprintf('s14= %2g, s24= %2g, s34= %2g, s44= %2g',v4));
disp(sprintf('<v1,v2> = %2g', v1'*v2));
disp(sprintf('<v1,v3> = %2g', v1'*v3));
disp(sprintf('<v1,v4> = %2g', v1'*v4));
%
%disp(sprintf('\nNot cecesseraly orthogonal'));
disp(sprintf('<v2,v3> = %2g', v2'*v3));
disp(sprintf('<v2,v4> = %2g', v2'*v4));
disp(sprintf('<v3,v4> = %2g', v3'*v4));

% H2*H2',

if length(vE)>1
    imagesc(1);
    plot(vE);
end;
% end
